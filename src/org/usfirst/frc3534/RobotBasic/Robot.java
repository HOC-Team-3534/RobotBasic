// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3534.RobotBasic;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3534.RobotBasic.systems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    public static OI oi;
    public static Drive drive;
    public static Shooter shooter;
    
    private int loopPeriod = 0;
	private int loopCnt = 0;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        
        drive = new Drive();
        shooter = new Shooter();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
    	
    }

    @Override
    public void autonomousInit() {
    	
    	 int desiredAutonMode = 0;
		    
    	 try {
			desiredAutonMode = (int)SmartDashboard.getNumber("autonMode", 0);				
    	 } catch(Exception ex) {}

    	 System.out.println("Running Auton " + desiredAutonMode);
		
    	 /*
    	 switch(desiredAutonMode) {
			case 0: 
				autonStateMachine = new AutonStateMachine0();								
				break;
			case 1:
				autonStateMachine = new AutonStateMachine1();				
				break;
			case 2:
				autonStateMachine = new AutonStateMachine2();				
				break;
			case 3:
				autonStateMachine = new AutonStateMachine3();
				break;
    	 }
    	 */
    	
		SmartDashboard.putNumber("aMode", desiredAutonMode);
        
		long prevLoopTime = 0;
        
        while(this.isAutonomous()) {
        	
        	drive.RobotState("autonomous enabled");
        	
        	long currentTime = System.currentTimeMillis();
        	
        	if(currentTime - prevLoopTime >= 20) {

        		loopPeriod = (int)(currentTime - prevLoopTime);
        		prevLoopTime = currentTime;
        		loopCnt++;
        		
        		//run processes
        		
        	}
        	
        	Timer.delay(0.001);
        	
        }
        
        drive.RobotState("autonomous disabled");
        
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
    	
    }

    @Override
    public void teleopInit() {

    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
    	
    	long prevLoopTime = 0;
        
        while(this.isOperatorControl() && this.isEnabled()) {
        	
        	drive.RobotState("teleop enabled");
        	
        	long currentTime = System.currentTimeMillis();
        	
        	if(currentTime - prevLoopTime >= 20) {

        		loopPeriod = (int)(currentTime - prevLoopTime);
        		prevLoopTime = currentTime;
        		loopCnt++;
        		
        		//run processes
        		
        		drive.process();
        		shooter.process();
        		
        	}
        	
        	Timer.delay(0.001);
        	
        }
        
        drive.RobotState("teleop disabled");
    }
}
